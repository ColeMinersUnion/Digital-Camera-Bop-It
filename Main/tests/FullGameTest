#include <Wire.h>

//Rot
const int OutA = 6;
const int OutB = 7;
//Push Button
const int Shoot = 5;
//I2C Stuff
const int threshold = 1000;
const int MPU_ADDR = 0x68;  // MPU6050 I2C address
int16_t ax, ay, az;
int16_t last_ax = 0, last_ay = 0, last_az = 0;
//Start Button
const int START_BUTTON = 4;
//speaker
const int Speaker = 2;

unsigned long startTime;

bool ShootPressed = false;
bool Turn = false;
bool Shake;

double time_per_instruction = 10000;  //ms

int Score;

void setup() {
  //rot inputs
  pinMode(OutA, INPUT);
  pinMode(OutB, INPUT);
  //Shoot
  pinMode(Shoot, INPUT);
  //Start
  pinMode(START_BUTTON, INPUT);

  //start timer
  startTime = millis();

  //I2C
  Wire.begin();  // I2C as master

  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x6B);
  Wire.write(0);
  Wire.endTransmission(true);
}

void readAccelerometer() {
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x3B);  // Starting register for accelerometer readings
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_ADDR, 6, true);  // Request 6 bytes

  ax = (Wire.read() << 8 | Wire.read()) / 16384.0;  // X-axis
  ay = (Wire.read() << 8 | Wire.read()) / 16384.0;  // Y-axis
  az = (Wire.read() << 8 | Wire.read()) / 16384.0;  // Z-axis
}

void loop() {
  //Wait for start button
  while (!digitalRead(START_BUTTON)) {
    delay(100);
  }
  //play start
  //Game init
  for (int i = 0; i < 99; i++) {     //instruction count
    int instruction = random(0, 3);  //random number between 0 and 2
    if (instruction == 0) {
      //play pan
      readAccelerometer();

      int dx = abs(ax - last_ax);
      int dy = abs(ay - last_ay);
      int dz = abs(az - last_az);
      if (!Shake && millis() - startTime <= time_per_instruction) {
        if (dx > threshold || dy > threshold || dz > threshold) {
          Score++;
          time_per_instruction = time_per_instruction * .99;

           Wire.beginTransmission(0x08);  // Match slave address
          Wire.write(Score);             // Send number
          Wire.endTransmission();

          // Update last values
          last_ax = ax;
          last_ay = ay;
          last_az = az;

          delay(100);
          Shake = true;
        }
      }
      if (millis() - startTime > time_per_instruction && !Shake) {
        //play loss
        break;
      }
      Shake = false;
    } else if (instruction == 1) {
      //play zoom
      int state1 = digitalRead(OutA);
      int state2 = digitalRead(OutB);

      if (!Turn && millis() - startTime <= time_per_instruction) {
        if (state1 == LOW || state2 == LOW) {
          Score++;
          time_per_instruction = time_per_instruction * .99;

          Wire.beginTransmission(0x08);  // Match slave address
          Wire.write(Score);             // Send number
          Wire.endTransmission();

          Turn = true;
        }
      }
      // Game Over
      if (millis() - startTime > time_per_instruction && !Turn) {
        //play loss
        break;
      }
      Turn = false;
    } else if (instruction == 2) {
      //play snap
      if (!ShootPressed && millis() - startTime <= time_per_instruction) {
        if (digitalRead(Shoot) == HIGH) {
          Score++;
          time_per_instruction = time_per_instruction * .99;

          Wire.beginTransmission(0x08);  // Match slave address
          Wire.write(Score);             // Send number
          Wire.endTransmission();

          ShootPressed = true;
        }
      }

      // Game Over
      if (millis() - startTime > time_per_instruction && !ShootPressed) {
        //play loss
        break;
      }

      ShootPressed = false;
    }
  }
}
